#!/bin/bash
# This script is used to check connection and to connect to IAC servers

SCRIPT_DESC="This script is used to check connection ant to connect to IAC servers"
commons_dir="/usr/local/bin/common"

# Include common functions
. ${commons_dir}/common.sh

# Include array util
. ${commons_dir}/arrayUtil.sh

# Include root functions
. ${commons_dir}/sudoUtil.sh

USERNAME="tmweb"
LEVELS="app1 app2 apc1 apc2 ui1 ui2 sui1 sui2 rep1 rep2 amq1 amq2 sql1 sql2 tls1 tls2"
SERVERS="eundev1 eunqa1 eunqa2 eunint1 eunstg1 euncap1 cft1 cft3"
SCRIPT="pwd; ls"
SSHCOMMAND="ssh -q -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o PasswordAuthentication=no"

HAS_ERROR=0

function build_url {
    echo "${1}.iac.${2}.websys.tmcs"
}

function build_url_with_user {
    echo "${1}@$(build_url ${2} ${3})"
}

function create_tunnel {
    local U=$(build_url_with_user ${USERNAME} ${LEVEL} ${SERVER})
    local U2=$(build_url ${LEVEL} ${SERVER})
    local SSHTUNNELCOMMAND="ssh -i /home/nvelickovic10/.ssh/id_rsa ${U} -L 3307:${U2}:3306 -N"
    runAsSudo "${SSHTUNNELCOMMAND}"
}

function test_connection {
    local URL="${1}"
    eval "${SSHCOMMAND} ${URL} 1>/dev/null exit"
}

function connect {
    array_contains "${LEVELS}" "${LEVEL}"
    if [ $? -eq 1 ];
    then
        logError "Invalid level: ${LEVEL}"
        logError "PLEASE USE ANY OF: ${LEVELS}"
        HAS_ERROR=1
    fi

    array_contains "${SERVERS}" "${SERVER}"
    if [ $? -eq 1 ];
    then
        logError "Invalid level: ${SERVER}"
        logError "PLEASE USE ANY OF: ${SERVERS}"
        HAS_ERROR=1
    fi

    if [ $HAS_ERROR -eq 1 ]
    then
        return 1
    fi

    local U=$(build_url_with_user ${USERNAME} ${LEVEL} ${SERVER})

    logInfo "TRYING: ${U}"
    test_connection ${U}
    if [ $? -ne '0' ]; then 
        logError "ERROR - NO ACCESS: ${U}"
        HAS_ERROR=1
        return 1
    fi 

    logInfo "DONE: SUCCESS ${U}"
    eval "${SSHCOMMAND} ${U}"
}

function test_all_connections {
    local ERRORED="FAILS:"
    for SERVER in ${SERVERS} ; do
        for LEVEL in ${LEVELS} ; do
            URL=$(build_url_with_user ${USERNAME} ${LEVEL} ${SERVER})
            logInfo "TRYING: ${URL}"
            test_connection ${URL}
            local LECODE=$?
            if [ ${LECODE} -ne '0' ]; then 
                logError "ERROR ${LECODE} - NO ACCESS: ${URL}"
                HAS_ERROR=1
                ERRORED="${ERRORED} (${LEVEL}, ${SERVER})"
            else
                logInfo "DONE: SUCCESS"
            fi 
        done
        logInfo "FINISHED: ${SERVER}"
        echo
    done
    logError "${ERRORED}"
}

function list_all_levels_and_servers {
    for SERVER in ${SERVERS} ; do
        for LEVEL in ${LEVELS} ; do
            URL=$(build_url_with_user ${USERNAME} ${LEVEL} ${SERVER})
            logInfo "${URL}"
        done
        echo
    done

    logInfo "LISTING ALL LEVELS AND SERVERS"

    logInfo "USERNAME: ${USERNAME}"
    logInfo "LEVELS: ${LEVELS}"
    logInfo "SERVERS: ${SERVERS}"
}

function print_help_and_exit {
    echo "USAGE"
    echo "  ${SCRIPT_NAME} [--connect <level> <server> | --test | --help | --tunnel (sql1 | sql2) <server>]"
    echo
    echo "DESCRIPTION"
    echo "  ${SCRIPT_DESC}"
    echo
    echo "OPTIONS"
    echo "  --connect, -c        : Connect to given level and server"
    echo "  --test,    -t        : Test connection to all servers"
    echo "  --list,    -ls       : List all levels and servers"
    echo "  --tunnel,  -tn       : Open ssh tunnel"
    echo
    echo "  --help,    -h        : Show this help"
    exit 1
}

ACTION="print_help_and_exit"
# Parsing command line arguments
for arg; do
    case "${arg}" in
        --connect|-c)
            ACTION="connect"
            LEVEL="$2"
            SERVER="$3"
        ;;
        --test|-t)
            ACTION="test_all_connections"
        ;;
        --list|-ls)
            ACTION="list_all_levels_and_servers"
        ;;
        --tunnel|-tn)
            ACTION="create_tunnel"
            LEVEL="$2"
            SERVER="$3"
        ;;
        --help|-h)
            print_help_and_exit
        ;;
    esac
done

COMMAND="${ACTION}"

eval ${COMMAND}

if [ $HAS_ERROR -eq 1 ]
then
    logError "Script exiting with error"
    exit 1
fi
logInfo "Finished all success"

#END
